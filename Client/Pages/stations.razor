@page "/stations"

@using System.Net.Http;
@inject HttpClient Http;
@using HelsinkiCityBikeApp.Shared;

<PageTitle>Stations</PageTitle>

<div class="childDiv">
    <label>Stations count</label>
    <input type="number" class="form-control" min="1" max="100" @bind-value="takeCount" />
    <label>Search Station Names</label>
    <input type="text" class="form-control" @bind-value="stationName" />
    <label>Search Station Addresses</label>
    <input type="text" class="form-control" @bind-value="stationAddress" />
    <label>Station Min Capacity</label>
    <input type="number" class="form-control" @bind-value="stationCapacity" />
    <button class="btn btn-primary" @onclick="FilterList">Filter</button>
    <button class="btn btn-danger ml-2" @onclick="ClearFilters">Clear Filters</button>
</div>

@if (filteredList != null)
{

    <div class="mainDiv">

        @foreach (var station in filteredList)
        {
            <div class="childDiv">
                <table>
                    <thead>
                        <tr>
                         
                            <th>Station Name</th>
                            <th>Station Address</th>
                            <th>Station Capacity</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                  
                            <td>@station.Nimi</td>
                            <td>@station.Osoite</td>
                            <td>@station.Kapasiteet</td>
                        </tr>
                        <tr>
                            <td colspan="4"><p>Map coming soon..</p></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>
}
else
{
    <div class="childDiv">  <h2><img src="/img/loading.gif" width="150" /></h2></div>
}

@code {
    private bool isRequestSuccessful = false;
    private List<Station> list = new List<Station>();
    private List<Station> filteredList = new List<Station>();
    private int takeCount = 10;
    private string stationName = "";
    private string stationAddress = "";
    private int stationCapacity = 1;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/stations");
        isRequestSuccessful = response.IsSuccessStatusCode;
        if (isRequestSuccessful)
        {
            list = await Http.GetFromJsonAsync<List<Station>>("api/stations");
            FilterList();
        }
    }

    private void FilterList()
    {
        filteredList = list
            .Where(station =>
            (string.IsNullOrEmpty(station.Nimi) || station.Nimi.ToUpper().StartsWith(stationName.ToUpper()))
    && (string.IsNullOrEmpty(station.Osoite) || station.Osoite.ToUpper().StartsWith(stationAddress.ToUpper()))
    && (station.Kapasiteet >= stationCapacity)

            )
            .Take(takeCount)
            .ToList();
    }
    private void ClearFilters()
    {
        stationName = "";
        stationAddress = "";
        stationCapacity = 1;
        FilterList();
    }

}
