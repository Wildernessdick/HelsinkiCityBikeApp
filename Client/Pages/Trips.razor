@page "/trips"
@using System.Net.Http;
@using HelsinkiCityBikeApp.Shared;
@inject NavigationManager NavigationManager
@inject HttpClient Http;

<PageTitle>Trips</PageTitle>
<div class="childDiv">

    <label>Depature Station Name</label>
    <input type="text" class="form-control" @bind-value="depatureStationName" />
    <label>Return Station Name</label>
    <input type="text" class="form-control" @bind-value="returnStationName" />
    <label>Min Covered Distance</label>
    <input type="number" class="form-control" @bind-value="minCoveredDistance" />
    <label>Depature Station Id</label>
    <input type="number" class="form-control" @bind-value="depatureStationId" />
    <button class="btn btn-primary" @onclick="FilterList">Filter</button>
    <button class="btn btn-danger ml-2" @onclick="ClearFilters">Clear Filters</button>
</div>

<div class="mainDiv">

    @if (filteredList != null)
    {
        @foreach (var trip in filteredList)
        {
        <div class="childDiv">
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Departure</th>
                        <th>Departure Station Name</th>
              
           
                        <th>Return</th>
                        <th>Return Station Name</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody>

               
                        <tr>
                            <td>@trip.ID</td>
                            <td>@trip.Departure</td>
                            <td>@trip.DepartureStationName</td>                    
                    
                            <td>@trip.Return</td>
                            <td>@trip.ReturnStationName</td>
                            <td> <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo($"/tripDetails/{trip.ID}"))">Details</button></td>
                        </tr>
                 
                </tbody>
            </table>
        </div>
        }       }
    else
    {
        <div class="childDiv">  <h2><img src="/img/loading.gif" width="150" /></h2></div>
    }

</div>

@code {
    private bool isRequestSuccessful = false;
    private List<Trip> list = new List<Trip>();
    private List<Trip> filteredList = new List<Trip>();
   
    private int takeCount = 100;
    private string depatureStationName = "";
    private string returnStationName = "";
    private int minCoveredDistance = 0;
    private int depatureStationId = 0;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/trips");
        if (response.IsSuccessStatusCode)
        {
        
            list = await response.Content.ReadFromJsonAsync<List<Trip>>();
            FilterList();
        }
    }

     
    
    private void FilterList()
    {
        filteredList = list
            .Where(trip =>
                (string.IsNullOrEmpty(depatureStationName) || trip.DepartureStationName.ToUpper().StartsWith(depatureStationName.ToUpper()))
                && (string.IsNullOrEmpty(returnStationName) || trip.ReturnStationName.ToUpper().StartsWith(returnStationName.ToUpper()))
                && (trip.CoveredDistance >= minCoveredDistance)
                && (depatureStationId == 0 || trip.DepartureStationId == depatureStationId)
            )
            .Take(takeCount)
            .ToList();
    }
    private void ClearFilters()
    {
        takeCount = 100;
        depatureStationName = "";
        returnStationName = "";
        minCoveredDistance = 0;
        depatureStationId = 0;
        FilterList();
    }
}
